buildscript {
    ext.cubaVersion = '7.2.11'
    repositories {
        mavenLocal()
        maven {
            url 'https://dl.bintray.com/cuba-platform/main'

        }
        jcenter()


    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def modulePrefix = 'app'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')
apply(plugin: 'war')

cuba {
    artifact {
        group = 'com.haulmont.melody'
        version = '0.1'
        isSnapshot = true
    }
    tomcat {
        }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent('com.haulmont.addon.cubajm:cuba-jm-test-global:0.7-SNAPSHOT')
}

def postgres = 'org.postgresql:postgresql:42.2.9'

configure([globalModule, coreModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies {
//        compile('net.bull.javamelody:javamelody-core:1.86.0')
        testCompile('org.junit.jupiter:junit-jupiter-api:5.5.2')
        testCompile('org.junit.jupiter:junit-jupiter-engine:5.5.2')
        testCompile('org.junit.vintage:junit-vintage-engine:5.5.2')
        compile('com.haulmont.addon.cubajm:cuba-jm-test-global:0.7-SNAPSHOT')
    }

//    task sourceJar(type: War, dependsOn: classes) {
//        from file('src')
//        classifier = 'sources'
//    }

    war {
        from 'src'
        webInf {from('web/WEB-INF')}
    }

    artifacts {
        archives war
    }
    test {
        useJUnitPlatform()
    }
}


configure(globalModule) {
    dependencies {
        if (!JavaVersion.current().isJava8()) {
            runtime('javax.xml.bind:jaxb-api:2.3.1')
            runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        }
//        compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    }

    entitiesEnhancing {
        main {
            enabled = true
        }
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
         compile(globalModule)
//        compileOnly(servletApi)
        compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
        jdbc(postgres)
        testRuntime(postgres)
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/melody/**"
        into "$cuba.appHome/${modulePrefix}/conf"
    }

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}-core/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
//        compileOnly(servletApi)
        compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
        compile(globalModule)
    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/melody/**"
        into "$cuba.appHome/${modulePrefix}/conf"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web')
    }
}

task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
    }
}
restart.finalizedBy start

def webWarFileName = "$buildDir/distributions/war/app.war"
def coreWarFileName = "$buildDir/distributions/war/app-core.war"

def webWarImagePath = "$projectDir/docker-image/tomcat/webwar"
def coreWarImagePath = "$projectDir/docker-image/tomcat/corewar"


task moveWars {
        doLast {
        if (file(webWarFileName).exists()) {
            ant.move file: webWarFileName,
                    todir: webWarImagePath
        }

        if (file(coreWarFileName).exists()) {
            ant.move file: coreWarFileName,
                    todir: coreWarImagePath
        }
    }
}

task buildWar(type: CubaWarBuilding) {
    includeJdbcDriver = true
    includeContextXml = true
    singleWar = false
    appProperties = [
            'cuba.automaticDatabaseUpdate': true,
            'cuba.webPort': 8080,
            'cuba.connectionUrlList': 'http://localhost:8080/app-core'
    ]
//    logbackConfigurationFile = 'etc/war-logback.xml'
//    coreWebXmlPath = 'modules/core/web/WEB-INF/web.xml'
//    webWebXmlPath = 'modules/web/web/WEB-INF/web.xml'
}